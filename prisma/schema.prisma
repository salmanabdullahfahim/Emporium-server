generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(uuid())
  email         String          @unique
  password      String
  role          UserRole
  name          String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  deletedAt     DateTime?
  admin         Admin?
  customer      Customer?
  vendor        Vendor?
  recentProduct RecentProduct[]

  @@map("users")
}

model Admin {
  id           String   @id @default(uuid())
  name         String
  email        String   @unique
  profilePhoto String?
  isDeleted    Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [email], references: [email])

  @@map("admins")
}

model Vendor {
  id           String    @id @default(uuid())
  name         String
  email        String    @unique
  profilePhoto String?
  isDeleted    Boolean   @default(false)
  isSuspended  Boolean   @default(false)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  follows      Follow[]
  orders       Order[]
  products     Product[]
  shop         Shop?
  user         User      @relation(fields: [email], references: [email])

  @@map("vendors")
}

model Customer {
  id           String    @id @default(uuid())
  name         String
  email        String    @unique
  profilePhoto String?
  isDeleted    Boolean   @default(false)
  isSuspended  Boolean   @default(false)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  cart         Cart[]
  user         User      @relation(fields: [email], references: [email])
  follows      Follow[]
  orders       Order[]
  reviews      Review[]
  payments     Payment[]

  @@map("customers")
}

model Shop {
  id            String    @id @default(uuid())
  name          String
  description   String?
  logo          String?
  vendorId      String    @unique
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime?
  isBlackListed Boolean   @default(false)

  vendor   Vendor    @relation(fields: [vendorId], references: [id])
  products Product[]

  @@map("shops")
}

model Product {
  id            String          @id @default(uuid())
  name          String
  description   String
  price         Float
  discount      Float           @default(0)
  categoryId    String
  inventory     Int
  image         String[]
  vendorId      String
  shopId        String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  deletedAt     DateTime?
  cart          Cart[]
  flashSales    FlashSale[]
  category      Category        @relation(fields: [categoryId], references: [id])
  vendor        Vendor          @relation(fields: [vendorId], references: [id])
  reviews       Review[]
  shop          Shop            @relation(fields: [shopId], references: [id])
  orderItems    OrderItem[]
  recentProduct RecentProduct[]

  @@map("products")
}

model Category {
  id          String    @id @default(uuid())
  name        String    @unique
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  products    Product[]

  @@map("categories")
}

model Order {
  id          String      @id @default(uuid())
  customerId  String
  vendorId    String
  totalAmount Float
  status      OrderStatus @default(PENDING)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  deletedAt   DateTime?
  payment     Payment?
  customer    Customer    @relation(fields: [customerId], references: [id])
  vendor      Vendor      @relation(fields: [vendorId], references: [id])
  order_items OrderItem[]

  @@map("orders")
}

model OrderItem {
  id        String   @id @default(uuid())
  orderId   String
  productId String
  quantity  Int
  price     Float
  discount  Float    @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  order     Order    @relation(fields: [orderId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])

  @@map("order_items")
}

model Cart {
  id         String   @id @default(uuid())
  customerId String
  productId  String
  quantity   Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  customer   Customer @relation(fields: [customerId], references: [id])
  product    Product  @relation(fields: [productId], references: [id])

  @@map("carts")
}

model Review {
  id         String   @id @default(uuid())
  customerId String
  productId  String
  rating     Int
  comment    String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  customer   Customer @relation(fields: [customerId], references: [id])
  product    Product  @relation(fields: [productId], references: [id])

  @@map("reviews")
}

model Follow {
  id         String   @id @default(uuid())
  customerId String
  vendorId   String
  isDeleted  Boolean  @default(false)
  createdAt  DateTime @default(now())
  customer   Customer @relation(fields: [customerId], references: [id])
  vendor     Vendor   @relation(fields: [vendorId], references: [id])

  @@map("follows")
}

model FlashSale {
  id        String   @id @default(uuid())
  productId String
  discount  Float
  startTime DateTime
  endTime   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id])

  @@map("flash_sales")
}

model Payment {
  id            String        @id @default(uuid())
  orderId       String        @unique
  customerId    String
  amount        Float
  paymentMethod String        @default("CARD")
  transactionId String?
  metadata      Json?
  status        PaymentStatus @default(PENDING)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  order         Order         @relation(fields: [orderId], references: [id])
  customer      Customer      @relation(fields: [customerId], references: [id])

  @@map("payments")
}

model RecentProduct {
  id        String   @id @default(uuid())
  userId    String
  productId String
  visitedAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])

  @@map("recent_products")
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
  REFUNDED
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  VENDOR
  CUSTOMER
}

enum OrderStatus {
  PENDING
  COMPLETED
  CANCELLED
}
